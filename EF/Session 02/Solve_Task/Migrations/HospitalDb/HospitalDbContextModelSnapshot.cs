// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solve_Task.Hospital.Data;

#nullable disable

namespace Solve_Task.Migrations.HospitalDb
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Solve_Task.Hospital.Model.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Drug", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Drug_Brand", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code", "Brand");

                    b.ToTable("Drug_Brands");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Nurse", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ward_Id")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cons_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBarth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ward_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cons_Id");

                    b.HasIndex("Ward_Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient_Consultant", b =>
                {
                    b.Property<int>("Patient_Id")
                        .HasColumnType("int");

                    b.Property<int>("Cons_Id")
                        .HasColumnType("int");

                    b.HasKey("Patient_Id", "Cons_Id");

                    b.HasIndex("Cons_Id");

                    b.ToTable("Patient_Consultants");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient_Drug_Nurse", b =>
                {
                    b.Property<int>("Patient_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Dossage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Drug_Code")
                        .HasColumnType("int");

                    b.Property<int>("Nurse_Number")
                        .HasColumnType("int");

                    b.HasKey("Patient_Id", "Date", "Time");

                    b.HasIndex("Drug_Code");

                    b.HasIndex("Nurse_Number");

                    b.ToTable("Patient_Drug_Nurses");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nurse_Num")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nurse_Num")
                        .IsUnique();

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Drug_Brand", b =>
                {
                    b.HasOne("Solve_Task.Hospital.Model.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient", b =>
                {
                    b.HasOne("Solve_Task.Hospital.Model.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("Cons_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solve_Task.Hospital.Model.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("Ward_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient_Consultant", b =>
                {
                    b.HasOne("Solve_Task.Hospital.Model.Consultant", "Consultant")
                        .WithMany("Patient_Consultants")
                        .HasForeignKey("Cons_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Solve_Task.Hospital.Model.Patient", "Patient")
                        .WithMany("Patient_Consultants")
                        .HasForeignKey("Patient_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient_Drug_Nurse", b =>
                {
                    b.HasOne("Solve_Task.Hospital.Model.Drug", "Drug")
                        .WithMany("Patient_Drug_Nurses")
                        .HasForeignKey("Drug_Code")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Solve_Task.Hospital.Model.Nurse", "Nurse")
                        .WithMany("Patient_Drug_Nurses")
                        .HasForeignKey("Nurse_Number")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Solve_Task.Hospital.Model.Patient", "Patient")
                        .WithMany("Patient_Drug_Nurses")
                        .HasForeignKey("Patient_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Ward", b =>
                {
                    b.HasOne("Solve_Task.Hospital.Model.Nurse", "Nurse")
                        .WithOne("Ward")
                        .HasForeignKey("Solve_Task.Hospital.Model.Ward", "Nurse_Num")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Consultant", b =>
                {
                    b.Navigation("Patient_Consultants");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Drug", b =>
                {
                    b.Navigation("Patient_Drug_Nurses");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Nurse", b =>
                {
                    b.Navigation("Patient_Drug_Nurses");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Solve_Task.Hospital.Model.Patient", b =>
                {
                    b.Navigation("Patient_Consultants");

                    b.Navigation("Patient_Drug_Nurses");
                });
#pragma warning restore 612, 618
        }
    }
}
