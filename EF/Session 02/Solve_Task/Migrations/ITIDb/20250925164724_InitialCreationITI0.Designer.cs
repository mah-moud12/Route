// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solve_Task.ITI.Data;

#nullable disable

namespace Solve_Task.Migrations.ITIDb
{
    [DbContext(typeof(ITIDbContext))]
    [Migration("20250925164724_InitialCreationITI0")]
    partial class InitialCreationITI0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.AirLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AirLine");
                });

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.AireLinePhones", b =>
                {
                    b.Property<int>("AL_Id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AL_Id", "Phone");

                    b.ToTable("AireLinePhones");
                });

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.Emp_Qualification", b =>
                {
                    b.Property<int>("Emp_Id")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Emp_Id", "Qualification");

                    b.ToTable("Emp_Qualification");
                });

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AL_Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AL_Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Topic_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Topic_Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Hiring_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Inst_course", b =>
                {
                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Inst_id")
                        .HasColumnType("int");

                    b.Property<string>("Evaluation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Course_id", "Inst_id");

                    b.HasIndex("Inst_id");

                    b.ToTable("Inst_course");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Bouns")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Dept_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Hour_rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Dept_Id");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Dept_Id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Dept_Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Student_Course", b =>
                {
                    b.Property<int>("St_Id")
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("St_Id", "Course_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("Student_Course");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.AireLinePhones", b =>
                {
                    b.HasOne("Solve_Task.AireLineDB.Model.AirLine", "AireLine_Phone")
                        .WithMany()
                        .HasForeignKey("AL_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AireLine_Phone");
                });

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.Emp_Qualification", b =>
                {
                    b.HasOne("Solve_Task.AireLineDB.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("Emp_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Solve_Task.AireLineDB.Model.Employee", b =>
                {
                    b.HasOne("Solve_Task.AireLineDB.Model.AirLine", "Emp_Air")
                        .WithMany()
                        .HasForeignKey("AL_Id");

                    b.Navigation("Emp_Air");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Course", b =>
                {
                    b.HasOne("Solve_Task.ITI.Model.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("Topic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Department", b =>
                {
                    b.HasOne("Solve_Task.ITI.Model.Instructor", "Manager")
                        .WithOne("Department")
                        .HasForeignKey("Solve_Task.ITI.Model.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Inst_course", b =>
                {
                    b.HasOne("Solve_Task.ITI.Model.Course", "Course")
                        .WithMany("Inst_Courses")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Solve_Task.ITI.Model.Instructor", "Instructor")
                        .WithMany("Inst_Courses")
                        .HasForeignKey("Inst_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Instructor", b =>
                {
                    b.HasOne("Solve_Task.ITI.Model.Department", "ContainIns")
                        .WithMany("Inst_Courses")
                        .HasForeignKey("Dept_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainIns");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Student", b =>
                {
                    b.HasOne("Solve_Task.ITI.Model.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("Dept_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Student_Course", b =>
                {
                    b.HasOne("Solve_Task.ITI.Model.Course", "Course")
                        .WithMany("Student_Courses")
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Solve_Task.ITI.Model.Student", "Student")
                        .WithMany("Student_Courses")
                        .HasForeignKey("St_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Course", b =>
                {
                    b.Navigation("Inst_Courses");

                    b.Navigation("Student_Courses");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Department", b =>
                {
                    b.Navigation("Inst_Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Instructor", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("Inst_Courses");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Student", b =>
                {
                    b.Navigation("Student_Courses");
                });

            modelBuilder.Entity("Solve_Task.ITI.Model.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
