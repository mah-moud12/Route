// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solve_Task.Musican.Data;

#nullable disable

namespace Solve_Task.Migrations.MusicianDb
{
    [DbContext(typeof(MusicianDbContext))]
    [Migration("20250926064033_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Solve_Task.Musican.Model.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mus_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Mus_Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Album_Song", b =>
                {
                    b.Property<int>("Album_id")
                        .HasColumnType("int");

                    b.Property<string>("song_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Album_id");

                    b.HasIndex("song_title")
                        .IsUnique();

                    b.ToTable("Album_Songs");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Instrument", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PH_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Musician_Instrument", b =>
                {
                    b.Property<int>("Musician_id")
                        .HasColumnType("int");

                    b.Property<string>("Inst_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Musician_id", "Inst_id");

                    b.HasIndex("Inst_id");

                    b.ToTable("Musician_Instruments");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Musician_song", b =>
                {
                    b.Property<int>("Mus_id")
                        .HasColumnType("int");

                    b.Property<string>("Song_title")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Mus_id", "Song_title");

                    b.HasIndex("Song_title");

                    b.ToTable("Musician_Songs");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Song", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Album", b =>
                {
                    b.HasOne("Solve_Task.Musican.Model.Musician", "Musician")
                        .WithMany("Albums")
                        .HasForeignKey("Mus_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Album_Song", b =>
                {
                    b.HasOne("Solve_Task.Musican.Model.Album", "Album")
                        .WithMany("Album_Songs")
                        .HasForeignKey("Album_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solve_Task.Musican.Model.Song", "Song")
                        .WithOne("Album_Song")
                        .HasForeignKey("Solve_Task.Musican.Model.Album_Song", "song_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Musician_Instrument", b =>
                {
                    b.HasOne("Solve_Task.Musican.Model.Instrument", "Instrument")
                        .WithMany("Musician_Instruments")
                        .HasForeignKey("Inst_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solve_Task.Musican.Model.Musician", "Musician")
                        .WithMany("Musician_Instruments")
                        .HasForeignKey("Musician_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Musician_song", b =>
                {
                    b.HasOne("Solve_Task.Musican.Model.Musician", "Musician")
                        .WithMany("Musician_Songs")
                        .HasForeignKey("Mus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Solve_Task.Musican.Model.Song", "Song")
                        .WithMany("Musician_Songs")
                        .HasForeignKey("Song_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Album", b =>
                {
                    b.Navigation("Album_Songs");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Instrument", b =>
                {
                    b.Navigation("Musician_Instruments");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Musician", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Musician_Instruments");

                    b.Navigation("Musician_Songs");
                });

            modelBuilder.Entity("Solve_Task.Musican.Model.Song", b =>
                {
                    b.Navigation("Album_Song");

                    b.Navigation("Musician_Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
